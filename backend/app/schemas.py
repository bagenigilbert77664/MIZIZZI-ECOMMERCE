# ----------------------
# Schemas (using Marshmallow)
# ----------------------
from marshmallow import Schema, fields, validate, validates, ValidationError
from marshmallow.validate import Length, Range, OneOf

class UserSchema(Schema):
    id = fields.Int(dump_only=True)
    name = fields.Str(required=True, validate=Length(min=2, max=100))
    email = fields.Email(required=True)
    password = fields.Str(load_only=True, required=True, validate=Length(min=6))
    role = fields.Str(validate=OneOf(['user', 'admin', 'manager']), dump_only=True)
    phone = fields.Str()
    address = fields.Dict()
    created_at = fields.DateTime(dump_only=True)
    last_login = fields.DateTime(dump_only=True)
    is_active = fields.Bool(dump_only=True)
    avatar_url = fields.Str()

class CategorySchema(Schema):
    id = fields.Int(dump_only=True)
    name = fields.Str(required=True, validate=Length(min=2, max=100))
    slug = fields.Str(required=True)
    description = fields.Str()
    image_url = fields.Str()
    banner_url = fields.Str()
    parent_id = fields.Int(allow_none=True)
    is_featured = fields.Bool()
    created_at = fields.DateTime(dump_only=True)
    updated_at = fields.DateTime(dump_only=True)

class ProductVariantSchema(Schema):
    id = fields.Int(dump_only=True)
    product_id = fields.Int(required=True)
    sku = fields.Str(validate=Length(max=50))
    color = fields.Str(validate=Length(max=50))
    size = fields.Str(validate=Length(max=20))
    stock = fields.Int(validate=Range(min=0))
    price = fields.Float(validate=Range(min=0))
    image_urls = fields.List(fields.Str())

class ProductSchema(Schema):
    id = fields.Int(dump_only=True)
    name = fields.Str(required=True, validate=Length(min=2, max=200))
    slug = fields.Str(required=True)
    description = fields.Str()
    price = fields.Float(required=True, validate=Range(min=0))
    sale_price = fields.Float(validate=Range(min=0), allow_none=True)
    stock = fields.Int(validate=Range(min=0))
    category_id = fields.Int(required=True)
    brand_id = fields.Int(allow_none=True)
    image_urls = fields.List(fields.Str())
    thumbnail_url = fields.Str()
    sku = fields.Str(validate=Length(max=50))
    weight = fields.Float(validate=Range(min=0), allow_none=True)
    dimensions = fields.Dict()
    is_featured = fields.Bool()
    is_new = fields.Bool()
    is_sale = fields.Bool()
    meta_title = fields.Str(validate=Length(max=200))
    meta_description = fields.Str()
    created_at = fields.DateTime(dump_only=True)
    updated_at = fields.DateTime(dump_only=True)
    variants = fields.Nested(ProductVariantSchema, many=True)

class ReviewSchema(Schema):
    id = fields.Int(dump_only=True)
    user_id = fields.Int(required=True)
    product_id = fields.Int(required=True)
    rating = fields.Int(required=True, validate=Range(min=1, max=5))
    title = fields.Str(validate=Length(max=200))
    comment = fields.Str()
    images = fields.List(fields.Str())
    is_verified_purchase = fields.Bool()
    created_at = fields.DateTime(dump_only=True)
    updated_at = fields.DateTime(dump_only=True)

class CartItemSchema(Schema):
    id = fields.Int(dump_only=True)
    user_id = fields.Int(required=True)
    product_id = fields.Int(required=True)
    variant_id = fields.Int(allow_none=True)
    quantity = fields.Int(required=True, validate=Range(min=1))
    created_at = fields.DateTime(dump_only=True)

class OrderItemSchema(Schema):
    id = fields.Int(dump_only=True)
    order_id = fields.Int(required=True)
    product_id = fields.Int(required=True)
    variant_id = fields.Int(allow_none=True)
    quantity = fields.Int(required=True, validate=Range(min=1))
    price = fields.Float(required=True, validate=Range(min=0))
    total = fields.Float(required=True, validate=Range(min=0))

class OrderSchema(Schema):
    id = fields.Int(dump_only=True)
    user_id = fields.Int(required=True)
    order_number = fields.Str(dump_only=True)
    status = fields.Str(validate=OneOf(['pending', 'processing', 'shipped', 'delivered', 'cancelled']))
    total_amount = fields.Float(required=True, validate=Range(min=0))
    shipping_address = fields.Dict(required=True)
    billing_address = fields.Dict(required=True)
    payment_method = fields.Str()
    payment_status = fields.Str(validate=OneOf(['pending', 'paid', 'failed']))
    shipping_method = fields.Str()
    shipping_cost = fields.Float(validate=Range(min=0))
    tracking_number = fields.Str()
    notes = fields.Str()
    created_at = fields.DateTime(dump_only=True)
    updated_at = fields.DateTime(dump_only=True)
    items = fields.Nested(OrderItemSchema, many=True)

class CouponSchema(Schema):
    id = fields.Int(dump_only=True)
    code = fields.Str(required=True, validate=Length(min=3, max=50))
    type = fields.Str(required=True, validate=OneOf(['percentage', 'fixed']))
    value = fields.Float(required=True, validate=Range(min=0))
    min_purchase = fields.Float(validate=Range(min=0))
    max_discount = fields.Float(validate=Range(min=0))
    start_date = fields.DateTime()
    end_date = fields.DateTime()
    usage_limit = fields.Int(validate=Range(min=0))
    used_count = fields.Int(dump_only=True)
    is_active = fields.Bool()

    @validates('end_date')
    def validate_end_date(self, value):
        if value and self.context.get('start_date') and value <= self.context['start_date']:
            raise ValidationError('End date must be after start date')

class PaymentSchema(Schema):
    id = fields.Int(dump_only=True)
    order_id = fields.Int(required=True)
    amount = fields.Float(required=True, validate=Range(min=0))
    payment_method = fields.Str(required=True)
    transaction_id = fields.Str()
    transaction_data = fields.Dict()
    status = fields.Str(validate=OneOf(['pending', 'completed', 'failed']))
    created_at = fields.DateTime(dump_only=True)
    completed_at = fields.DateTime()

# Schema instances for convenience
user_schema = UserSchema()
users_schema = UserSchema(many=True)
category_schema = CategorySchema()
categories_schema = CategorySchema(many=True)
product_schema = ProductSchema()
products_schema = ProductSchema(many=True)
review_schema = ReviewSchema()
reviews_schema = ReviewSchema(many=True)
cart_item_schema = CartItemSchema()
cart_items_schema = CartItemSchema(many=True)
order_schema = OrderSchema()
orders_schema = OrderSchema(many=True)
coupon_schema = CouponSchema()
coupons_schema = CouponSchema(many=True)
payment_schema = PaymentSchema()
payments_schema = PaymentSchema(many=True)
